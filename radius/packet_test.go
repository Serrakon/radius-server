package radius

import (
	"net"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestPacket_UnmarshalBinary(t *testing.T) {
	b := []byte{
		0x01, 0xdc, 0x00, 0x4a, 0xd0, 0x92, 0x79, 0x79, 0xb3, 0x38, 0x3c, 0x20, 0x42, 0x50, 0x14,
		0xfe, 0x75, 0x7b, 0x8c, 0x8a, 0x01, 0x06, 0x75, 0x73, 0x65, 0x72, 0x02, 0x12, 0xab, 0x31,
		0x79, 0x59, 0x3e, 0x28, 0x55, 0x40, 0x98, 0x36, 0x20, 0x74, 0x21, 0x68, 0x3b, 0xf1, 0x04,
		0x06, 0x63, 0x6c, 0x46, 0x81, 0x05, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x50, 0x12, 0x6e, 0x75,
		0x4a, 0x21, 0x3c, 0x77, 0x0a, 0x18, 0xd5, 0x46, 0x1a, 0x03, 0x04, 0xfb, 0x6b, 0xcc,
	}
	p := &Packet{}
	err := p.UnmarshalBinary(b)
	assert.NoError(t, err)
	assert.Equal(t, &Packet{
		Code:          CodeAccessRequest,
		Identifier:    220,
		Authenticator: []byte{0xd0, 0x92, 0x79, 0x79, 0xb3, 0x38, 0x3c, 0x20, 0x42, 0x50, 0x14, 0xfe, 0x75, 0x7b, 0x8c, 0x8a},
		Attributes: []*Attribute{
			MustAttribute(NewStringAttribute(AttributeTypeUserName, []byte("user"))),
			MustAttribute(NewStringAttribute(AttributeTypeUserPassword, []byte{0xab, 0x31, 0x79, 0x59, 0x3e, 0x28, 0x55, 0x40, 0x98, 0x36, 0x20, 0x74, 0x21, 0x68, 0x3b, 0xf1})),
			MustAttribute(NewAddressAttribute(AttributeTypeNASIPAddress, net.IPv4(99, 108, 70, 129))),
			MustAttribute(NewIntAttribute(AttributeTypeNASPort, uint32(10))),
			MustAttribute(NewStringAttribute(AttributeTypeMessageAuthenticator, []byte{0x6e, 0x75, 0x4a, 0x21, 0x3c, 0x77, 0x0a, 0x18, 0xd5, 0x46, 0x1a, 0x03, 0x04, 0xfb, 0x6b, 0xcc})),
		},
	}, p)
}

func TestPacket_MarshalBinary(t *testing.T) {
	b := []byte{
		0x01, 0x93, 0x00, 0x43, 0xf0, 0xc4, 0x74, 0x3b, 0x96, 0xdb, 0x8a, 0x48, 0xa0, 0x14, 0xd5,
		0x50, 0x1d, 0x69, 0x5d, 0x77, 0x01, 0x06, 0x75, 0x73, 0x65, 0x72, 0x04, 0x06, 0x63, 0x6c,
		0x46, 0x81, 0x05, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x50, 0x12, 0xa1, 0xe6, 0x54, 0xcb, 0x76,
		0x9a, 0x29, 0x02, 0x90, 0x00, 0x94, 0x12, 0x3c, 0x39, 0x7e, 0xec, 0x4f, 0x0b, 0x02, 0x4d,
		0x00, 0x09, 0x01, 0x75, 0x73, 0x65, 0x72,
	}
	decoded := &Packet{}
	err := decoded.UnmarshalBinary(b)
	assert.NoError(t, err)
	encoded, err := decoded.MarshalBinary()
	assert.NoError(t, err)
	assert.Equal(t, b, encoded)
}

func TestPacket_VerifyMessageAuthenticator(t *testing.T) {
	b := []byte{
		0x01, 0x93, 0x00, 0x43, 0xf0, 0xc4, 0x74, 0x3b, 0x96, 0xdb, 0x8a, 0x48, 0xa0, 0x14, 0xd5,
		0x50, 0x1d, 0x69, 0x5d, 0x77, 0x01, 0x06, 0x75, 0x73, 0x65, 0x72, 0x04, 0x06, 0x63, 0x6c,
		0x46, 0x81, 0x05, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x50, 0x12, 0xa1, 0xe6, 0x54, 0xcb, 0x76,
		0x9a, 0x29, 0x02, 0x90, 0x00, 0x94, 0x12, 0x3c, 0x39, 0x7e, 0xec, 0x4f, 0x0b, 0x02, 0x4d,
		0x00, 0x09, 0x01, 0x75, 0x73, 0x65, 0x72,
	}
	p := &Packet{}
	err := p.UnmarshalBinary(b)
	assert.NoError(t, err)
	assert.NoError(t, p.VerifyMessageAuthenticator([]byte("secret")))

	assert.Error(t, p.VerifyMessageAuthenticator([]byte("wrongsecret")))

	p.Identifier = 80
	assert.Error(t, p.VerifyMessageAuthenticator([]byte("secret")))
}
